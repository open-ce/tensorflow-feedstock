From 0e7bb37de65ef5a8541f800bc74faf00da3b6718 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Fri, 7 Apr 2023 17:04:46 +0000
Subject: [PATCH] remove assert for little-endian

---
 tensorflow/workspace3.bzl                     |  2 +-
 third_party/tf_runtime/BUILD                  |  0
 .../tf_runtime/remove-bigendian-asserts.patch | 57 +++++++++++++++++++
 third_party/tf_runtime/workspace.bzl          |  2 +-
 4 files changed, 59 insertions(+), 2 deletions(-)
 create mode 100644 third_party/tf_runtime/BUILD
 create mode 100644 third_party/tf_runtime/remove-bigendian-asserts.patch

diff --git a/tensorflow/workspace3.bzl b/tensorflow/workspace3.bzl
index 91871db22c8..c13e8cc6344 100644
--- a/tensorflow/workspace3.bzl
+++ b/tensorflow/workspace3.bzl
@@ -1,7 +1,7 @@
 """TensorFlow workspace initialization. Consult the WORKSPACE on how to use it."""
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
-load("//third_party:tf_runtime/workspace.bzl", tf_runtime = "repo")
+load("//third_party/tf_runtime:workspace.bzl", tf_runtime = "repo")
 load("//third_party/llvm:workspace.bzl", llvm = "repo")
 
 def workspace():
diff --git a/third_party/tf_runtime/BUILD b/third_party/tf_runtime/BUILD
new file mode 100644
index 00000000000..e69de29bb2d
diff --git a/third_party/tf_runtime/remove-bigendian-asserts.patch b/third_party/tf_runtime/remove-bigendian-asserts.patch
new file mode 100644
index 00000000000..5bbf21cf694
--- /dev/null
+++ b/third_party/tf_runtime/remove-bigendian-asserts.patch
@@ -0,0 +1,57 @@
+From a456a421e7f6689d870bedc884cc3e409aa4b140 Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Fri, 7 Apr 2023 17:02:39 +0000
+Subject: [PATCH] Disable erro for big endian not being supported
+
+---
+ include/tfrt/host_context/attribute_utils.h | 4 ++--
+ lib/tensor/tensor_serialize_utils.cc        | 4 ++--
+ 2 files changed, 4 insertions(+), 4 deletions(-)
+
+diff --git a/include/tfrt/host_context/attribute_utils.h b/include/tfrt/host_context/attribute_utils.h
+index cbded469..b1074096 100644
+--- a/include/tfrt/host_context/attribute_utils.h
++++ b/include/tfrt/host_context/attribute_utils.h
+@@ -52,7 +52,7 @@ class Attribute {
+  public:
+   explicit Attribute(const void* value)
+       : value_(*reinterpret_cast<const T*>(value)) {
+-    ASSERT_LITTLE_ENDIAN();
++    //ASSERT_LITTLE_ENDIAN();
+   }
+ 
+   const T& get() const { return value_; }
+@@ -127,7 +127,7 @@ class CompilationUnitAttribute {
+  public:
+   explicit CompilationUnitAttribute(const void* value)
+       : addr_(reinterpret_cast<intptr_t>(value)) {
+-    ASSERT_LITTLE_ENDIAN();
++    //ASSERT_LITTLE_ENDIAN();
+     const auto* ptr = static_cast<const uint8_t*>(value);
+ 
+     ptr = ReadVbrInt(ptr, &id_);
+diff --git a/lib/tensor/tensor_serialize_utils.cc b/lib/tensor/tensor_serialize_utils.cc
+index ddaa7b1b..96893b26 100644
+--- a/lib/tensor/tensor_serialize_utils.cc
++++ b/lib/tensor/tensor_serialize_utils.cc
+@@ -102,7 +102,7 @@ std::string SerializeTensorMetadata(const TensorMetadata& md) {
+ 
+ llvm::Expected<TensorMetadata> DeserializeTensorMetadataInternal(
+     const char* pos, size_t size) {
+-  ASSERT_LITTLE_ENDIAN();
++//  ASSERT_LITTLE_ENDIAN();
+   DType kind = static_cast<DType>(*reinterpret_cast<const uint64_t*>(pos));
+   pos += sizeof(uint64_t);
+   const int num_dimensions = size / 8 - 1;
+@@ -119,7 +119,7 @@ llvm::Expected<TensorMetadata> DeserializeTensorMetadataInternal(
+ 
+ llvm::Expected<TensorMetadata> DeserializeTensorMetadata(
+     string_view serialized) {
+-  ASSERT_LITTLE_ENDIAN();
++//  ASSERT_LITTLE_ENDIAN();
+   return DeserializeTensorMetadataInternal(serialized.data(),
+                                            serialized.size());
+ }
+-- 
+2.34.1
+
diff --git a/third_party/tf_runtime/workspace.bzl b/third_party/tf_runtime/workspace.bzl
index 094f644060e..59d14fd69ba 100644
--- a/third_party/tf_runtime/workspace.bzl
+++ b/third_party/tf_runtime/workspace.bzl
@@ -16,5 +16,5 @@ def repo():
         urls = tf_mirror_urls("https://github.com/tensorflow/runtime/archive/{commit}.tar.gz".format(commit = TFRT_COMMIT)),
         # A patch file can be provided for atomic commits to both TF and TFRT.
         # The job that bumps the TFRT_COMMIT also resets patch_file to 'None'.
-        patch_file = None,
+        patch_file = ["//third_party/tf_runtime:remove-bigendian-asserts.patch"],
     )
-- 
2.34.1

